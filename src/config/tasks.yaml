research_task_piesp_sp_2025:
  agent: pesquisador_noticias
  description: >
    Pesquise e colete aproximadamente 20 anúncios de investimentos produtivos concretos no estado de São Paulo, publicados em 2025.
    Siga rigorosamente a metodologia PIESP: foque em **ações físicas e localizadas** (novas unidades, expansões significativas, construção de fábricas, instalação de centros de P&D/distribuição, modernizações estruturais).
    **REQUISITOS OBRIGATÓRIOS:**
    - A notícia deve ser de **2025**.
    - A ação deve ocorrer em um **município validado do estado de São Paulo** (consulte municipios_sp.txt).
    - A notícia deve descrever uma **ação concreta e física** (inauguração, expansão, construção, instalação, modernização relevante).
    - Deve ser possível extrair: **Título da notícia, Resumo focado no investimento, Ano (2025), e Link da fonte**.
    **PRIORIZAÇÃO:** Dê preferência a notícias que mencionem **valor do investimento** ou **impacto** (empregos, capacidade), mas colete mesmo sem esses dados se os requisitos obrigatórios forem atendidos.
    **VALIDAÇÃO:** Use fontes confiáveis listadas na ferramenta de busca. **DESCARTE** anúncios vagos, intenções futuras não confirmadas, fusões/aquisições sem expansão física, resultados financeiros, ou notícias sem localização clara em SP.
  expected_output: >
    Uma lista de dicionários Python, onde cada dicionário representa um anúncio de investimento validado e contém **exatamente** as seguintes chaves e valores extraídos da notícia:
        "categoria": (string) Categoria da notícia (ex: "Investimentos", "Expansões", "Construções", etc.). ,
        "titulo": (string) Título original da notícia. ,
        "link": (string) URL completo da notícia. ,
        "descricao_detalhada": (string) Resumo conciso focado nos detalhes do investimento (empresa, tipo de ação, local, setor, valor/impacto se disponível). ,
        "data": (string) Data de publicação da notícia (deve ser 2025, com dia e mês especificados). ,
        "municipio": (string) Nome do município onde a ação ocorre (validado com `municipios_sp.txt`). ,
        "tipo_investimento": (string) Tipo de ação concreta (ex: "Inauguração", "Expansão", "Construção", "Instalação", "Modernização"). ,
        "valor_estimado": (string ou float) Valor do investimento, se disponível (pode ser uma string com o valor monetário ou um número). ,
        "fonte_financiamento": (string) Fonte de financiamento do investimento, se mencionada (ex: "Recursos próprios", "Financiamento bancário", etc.). ,
        "fonte_noticia": (string) Nome da fonte de notícias que publicou a informação (ex: "Jornal X", "Revista Y", etc.).


reporting_task_csv:
  description: |
    Receber a lista de dicionários Python do pesquisador (contexto da tarefa).
    Verificar se a entrada é uma lista de dicionários e se cada dicionário contém as chaves esperadas (        "categoria": (string) Categoria da notícia (ex: "Investimentos", "Expansões", "Construções", etc.). ,
        "titulo": (string) Título original da notícia. ,
        "link": (string) URL completo da notícia. ,
        "descricao_detalhada": (string) Resumo conciso focado nos detalhes do investimento (empresa, tipo de ação, local, setor, valor/impacto se disponível). ,
        "data": (string) Data de publicação da notícia (deve ser 2025, com dia e mês especificados). ,
        "municipio": (string) Nome do município onde a ação ocorre (validado com `municipios_sp.txt`). ,
        "tipo_investimento": (string) Tipo de ação concreta (ex: "Inauguração", "Expansão", "Construção", "Instalação", "Modernização"). ,
        "valor_estimado": (string ou float) Valor do investimento, se disponível (pode ser uma string com o valor monetário ou um número). ,
        "fonte_financiamento": (string) Fonte de financiamento do investimento, se mencionada (ex: "Recursos próprios", "Financiamento bancário", etc.). ,
        "fonte_noticia": (string) Nome da fonte de notícias que publicou a informação (ex: "Jornal X", "Revista Y", etc.).
        ).
    Usar uma biblioteca Python padrão (como `Json`) para escrever os dados no arquivo `output/investimentos_piesp_sp_2025_crewai.Json`.
    Escrever o cabeçalho: "titulo, link, descricao_detalhada, data, municipio, tipo_investimento, valor_estimado, fonte_financiamento e fonte_noticia".
    Iterar sobre a lista de dicionários e escrever cada um como uma linha no Json, garantindo a ordem correta das colunas e o tratamento adequado de caracteres especiais (como vírgulas dentro do resumo, que devem ser encapsuladas por aspas).
    Confirmar a criação bem-sucedida do arquivo.
  expected_output: |
    Um arquivo Json chamado `investimentos_piesp_sp_2025_crewai.Json` com as colunas: **titulo, link, descricao_detalhada, data, municipio, tipo_investimento, valor_estimado, fonte_financiamento e fonte_noticia**.
    O arquivo deve estar formatado corretamente (ex: uso de aspas para campos com vírgulas).



identificar_noticias_repetidas:
  description: |
    Receber uma lista de notícias (como dicionários Python), cada uma contendo ao menos uma URL.
    Para cada notícia, você deve usar a ferramenta `Read website content` para obter o conteúdo textual da notícia acessando seu link.

    Em seguida, você deve identificar notícias duplicadas ou que falam do mesmo evento/investimento (mesmo se publicadas por fontes diferentes),
    consolidando essas em uma única entrada.

    Sempre utilize o seguinte formato para executar seu raciocínio:

    ```
    Thought: pense sobre o que deve ser feito a seguir
    Action: escolha uma das ferramentas disponíveis (use uma por vez)
    Action Input: parâmetros da ferramenta em JSON
    Observation: resultado da ferramenta
    ```

    Quando tiver todas as informações e terminar o processo de consolidação, responda usando:

    ```
    Thought: I now can give a great answer
    Final Answer: [lista final de dicionários consolidados]
    ```

    Nunca forneça "Action: None". Se não for usar ferramenta, vá direto ao Final Answer.
  expected_output: |
    Uma lista Python de dicionários, onde cada dicionário representa uma notícia única e consolidada. Cada dicionário deve conter as seguintes chaves:
        - "titulo": (string) Título original da notícia
        - "link": (string) URL completo da notícia (a mais representativa)
        - "descricao_detalhada": (string) Resumo conciso focado nos detalhes do investimento (empresa, tipo de ação, local, setor, valor/impacto se disponível)
        - "data": (string) Data de publicação da notícia (deve ser 2025, com dia e mês especificados)
        - "municipio": (string) Nome do município onde a ação ocorre (validado com `municipios_sp.txt`)
        - "tipo_investimento": (string) Tipo de ação concreta (ex: "Inauguração", "Expansão", "Construção", "Instalação", "Modernização")
        - "valor_estimado": (string ou float) Valor do investimento, se disponível (pode ser uma string com o valor monetário ou um número)
        - "fonte_financiamento": (string) Fonte de financiamento do investimento, se mencionada (ex: "Recursos próprios", "Financiamento bancário", etc.)
        - "fonte_noticia": (string) Nome da fonte de notícias que publicou a informação
        - "fontes_relacionadas": (lista de strings) Todas as URLs das notícias agrupadas como duplicatas
