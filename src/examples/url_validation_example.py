"""
Exemplo de uso do validador de URLs
Demonstra como verificar se not√≠cias realmente existem
"""

from utils.url_validator import url_validator
from utils.data_processor import data_processor
import json

def example_url_validation():
    """Exemplo de valida√ß√£o de URLs"""
    
    # Exemplos de URLs para teste
    test_urls = [
        "https://valor.com.br/empresas",  # URL v√°lida
        "https://estadao.com.br/economia",  # URL v√°lida
        "https://exemplo-inexistente-404.com/noticia",  # URL que n√£o existe
        "https://globo.com/economia/noticia-exemplo",  # URL que pode existir
        "invalid-url-format",  # URL com formato inv√°lido
        "https://httpstat.us/500",  # URL que retorna erro 500
    ]
    
    print("=== EXEMPLO DE VALIDA√á√ÉO DE URLs ===\n")
    
    # Valida URLs individualmente
    print("1. VALIDA√á√ÉO INDIVIDUAL DE URLs:")
    for i, url in enumerate(test_urls, 1):
        print(f"\n--- URL {i} ---")
        print(f"URL: {url}")
        
        result = url_validator.validate_url(url, check_content=True)
        
        print(f"‚úÖ Acess√≠vel: {'SIM' if result.is_accessible else 'N√ÉO'}")
        print(f"üìä Status Code: {result.status_code}")
        print(f"‚è±Ô∏è Tempo de Resposta: {result.response_time:.2f}s")
        print(f"üìÑ Conte√∫do V√°lido: {'SIM' if result.has_valid_content else 'N√ÉO'}")
        print(f"üìè Tamanho do Conte√∫do: {result.content_length} chars")
        
        if result.error_message:
            print(f"‚ùå Erro: {result.error_message}")
        
        if result.content_indicators:
            print(f"üîç Indicadores de Conte√∫do:")
            for indicator, value in result.content_indicators.items():
                status = "‚úÖ" if value else "‚ùå"
                print(f"   {status} {indicator}")
    
    # Valida lote de URLs
    print(f"\n\n2. VALIDA√á√ÉO EM LOTE:")
    batch_results = url_validator.batch_validate_urls(test_urls, check_content=True)
    
    accessible_count = sum(1 for r in batch_results if r.is_accessible)
    valid_content_count = sum(1 for r in batch_results if r.has_valid_content)
    
    print(f"Total de URLs: {len(test_urls)}")
    print(f"URLs acess√≠veis: {accessible_count}")
    print(f"URLs com conte√∫do v√°lido: {valid_content_count}")
    print(f"Taxa de acessibilidade: {accessible_count/len(test_urls):.1%}")
    print(f"Taxa de conte√∫do v√°lido: {valid_content_count/len(test_urls):.1%}")
    
    # Gera relat√≥rio detalhado
    print(f"\n\n3. RELAT√ìRIO DE VALIDA√á√ÉO:")
    report = url_validator.generate_validation_report(batch_results)
    
    print(f"Taxa de acessibilidade: {report['validation_summary']['accessibility_rate']:.1%}")
    print(f"Taxa de conte√∫do v√°lido: {report['validation_summary']['content_validity_rate']:.1%}")
    print(f"Tempo m√©dio de resposta: {report['validation_summary']['average_response_time']:.2f}s")
    
    print(f"\nDistribui√ß√£o de Status Codes:")
    for code, count in report['status_code_distribution'].items():
        print(f"  - {code}: {count} URLs")
    
    if report['error_types']:
        print(f"\nTipos de Erro:")
        for error_type, count in list(report['error_types'].items())[:5]:
            print(f"  - {error_type}: {count} ocorr√™ncias")
    
    return report

def example_news_filtering():
    """Exemplo de filtragem de not√≠cias com URLs v√°lidas"""
    
    print("\n\n=== EXEMPLO DE FILTRAGEM DE NOT√çCIAS ===\n")
    
    # Not√≠cias de exemplo (algumas com URLs inv√°lidas)
    sample_news = [
        {
            "categoria": "Investimentos",
            "titulo": "Empresa anuncia investimento em S√£o Paulo",
            "link": "https://valor.com.br/empresas",  # URL v√°lida
            "descricao_detalhada": "Empresa XYZ anuncia investimento de R$ 50 milh√µes em nova f√°brica.",
            "data": "15/07/2025",
            "municipio": "S√£o Paulo",
            "tipo_investimento": "Constru√ß√£o",
            "fonte_noticia": "Valor Econ√¥mico"
        },
        {
            "categoria": "Expans√µes",
            "titulo": "Nova unidade industrial em Campinas",
            "link": "https://exemplo-404-nao-existe.com/noticia",  # URL inv√°lida
            "descricao_detalhada": "Ind√∫stria planeja nova unidade em Campinas.",
            "data": "10/07/2025",
            "municipio": "Campinas",
            "tipo_investimento": "Expans√£o",
            "fonte_noticia": "Jornal Local"
        },
        {
            "categoria": "Moderniza√ß√£o",
            "titulo": "Moderniza√ß√£o de f√°brica em Santos",
            "link": "https://estadao.com.br/economia",  # URL v√°lida
            "descricao_detalhada": "F√°brica em Santos recebe investimento para moderniza√ß√£o.",
            "data": "12/07/2025",
            "municipio": "Santos",
            "tipo_investimento": "Moderniza√ß√£o",
            "fonte_noticia": "Estad√£o"
        },
        {
            "categoria": "Investimentos",
            "titulo": "Investimento sem link v√°lido",
            "link": "url-invalida-sem-protocolo",  # URL com formato inv√°lido
            "descricao_detalhada": "Investimento sem URL v√°lida.",
            "data": "08/07/2025",
            "municipio": "Sorocaba",
            "tipo_investimento": "Instala√ß√£o",
            "fonte_noticia": "Fonte Desconhecida"
        }
    ]
    
    print(f"Not√≠cias originais: {len(sample_news)}")
    for i, news in enumerate(sample_news, 1):
        print(f"  {i}. {news['titulo']} - {news['link']}")
    
    # Filtra not√≠cias com URLs v√°lidas
    print(f"\nüîç Filtrando not√≠cias com URLs v√°lidas...")
    valid_news = url_validator.filter_valid_news(sample_news, check_content=True)
    
    print(f"\nNot√≠cias ap√≥s filtragem: {len(valid_news)}")
    for i, news in enumerate(valid_news, 1):
        print(f"  {i}. {news['titulo']} - {news['link']}")
        
        # Mostra informa√ß√µes de valida√ß√£o
        validation_info = news.get('url_validation', {})
        print(f"     ‚úÖ Status: {validation_info.get('status_code', 'N/A')}")
        print(f"     ‚è±Ô∏è Tempo: {validation_info.get('response_time', 0):.2f}s")
        print(f"     üìÑ Conte√∫do: {'V√°lido' if validation_info.get('has_valid_content') else 'Inv√°lido'}")
    
    return valid_news

def demonstrate_integration_with_processor():
    """Demonstra integra√ß√£o com o processador de dados"""
    
    print("\n\n=== INTEGRA√á√ÉO COM PROCESSADOR DE DADOS ===\n")
    
    # Not√≠cias de exemplo
    sample_news = [
        {
            "categoria": "Investimentos",
            "titulo": "Investimento v√°lido com URL acess√≠vel",
            "link": "https://valor.com.br/empresas",
            "descricao_detalhada": "Descri√ß√£o detalhada do investimento.",
            "data": "15/07/2025",
            "municipio": "S√£o Paulo",
            "tipo_investimento": "Constru√ß√£o",
            "valor_estimado": "50000000",
            "fonte_financiamento": "Recursos pr√≥prios",
            "fonte_noticia": "Valor Econ√¥mico"
        },
        {
            "categoria": "Investimentos", 
            "titulo": "Investimento com URL inv√°lida",
            "link": "https://site-que-nao-existe-404.com/noticia",
            "descricao_detalhada": "Esta not√≠cia ser√° filtrada por URL inv√°lida.",
            "data": "10/07/2025",
            "municipio": "Campinas",
            "tipo_investimento": "Expans√£o",
            "valor_estimado": "30000000",
            "fonte_financiamento": "Financiamento banc√°rio",
            "fonte_noticia": "Fonte Inexistente"
        }
    ]
    
    print(f"Processando {len(sample_news)} not√≠cias com valida√ß√£o de URL habilitada...")
    
    # Processa com valida√ß√£o de URL habilitada
    processed_news = data_processor.process_news_batch(
        sample_news, 
        verify_credibility=True, 
        validate_urls=True
    )
    
    print(f"\nNot√≠cias processadas: {len(processed_news)}")
    
    for i, news in enumerate(processed_news, 1):
        print(f"\n--- Not√≠cia {i} ---")
        print(f"T√≠tulo: {news.titulo}")
        print(f"URL: {news.link}")
        print(f"Qualidade dos dados: {news.qualidade_dados:.2f}")
        print(f"Score de credibilidade: {news.credibility_score:.2f}")
        print(f"√â confi√°vel: {'‚úÖ SIM' if news.is_credible else '‚ùå N√ÉO'}")
        
        if hasattr(news, 'url_validation_info'):
            print(f"Valida√ß√£o de URL: ‚úÖ Aprovada")
        
        if news.warning_flags:
            print(f"Alertas: {', '.join(news.warning_flags)}")

def demonstrate_validation_criteria():
    """Demonstra os crit√©rios de valida√ß√£o de URLs"""
    
    print("\n=== CRIT√âRIOS DE VALIDA√á√ÉO DE URLs ===\n")
    
    print("1. VERIFICA√á√ÉO DE ACESSIBILIDADE:")
    print("   - Status HTTP 200-299: URL acess√≠vel")
    print("   - Status HTTP 404: P√°gina n√£o encontrada")
    print("   - Status HTTP 403: Acesso negado")
    print("   - Status HTTP 500: Erro do servidor")
    print("   - Timeout: URL inacess√≠vel")
    
    print("\n2. AN√ÅLISE DE CONTE√öDO:")
    print("   ‚úÖ Indicadores de conte√∫do v√°lido:")
    print("      - Presen√ßa de tags HTML estruturais (<title>, <h1>, <article>)")
    print("      - Conte√∫do com mais de 500 caracteres")
    print("      - Estrutura de p√°gina de not√≠cia")
    
    print("\n   ‚ùå Indicadores de problema:")
    print("      - Mensagens de erro (404, p√°gina n√£o encontrada)")
    print("      - Paywall ou bloqueio de conte√∫do")
    print("      - Conte√∫do insuficiente")
    
    print("\n3. CONFIGURA√á√ïES DE SEGURAN√áA:")
    print("   - User-Agent de navegador real")
    print("   - Headers HTTP apropriados")
    print("   - Timeout de 15 segundos")
    print("   - M√°ximo 3 tentativas com retry")
    print("   - Pausa de 1 segundo entre requisi√ß√µes")
    
    print("\n4. RELAT√ìRIOS GERADOS:")
    print("   - Taxa de acessibilidade")
    print("   - Taxa de conte√∫do v√°lido")
    print("   - Tempo m√©dio de resposta")
    print("   - Distribui√ß√£o de status codes")
    print("   - Tipos de erro mais comuns")

if __name__ == "__main__":
    # Executa exemplos
    print("üîç SISTEMA DE VALIDA√á√ÉO DE URLs PARA NOT√çCIAS")
    print("=" * 50)
    
    # Exemplo 1: Valida√ß√£o b√°sica de URLs
    url_report = example_url_validation()
    
    # Exemplo 2: Filtragem de not√≠cias
    valid_news = example_news_filtering()
    
    # Exemplo 3: Integra√ß√£o com processador
    demonstrate_integration_with_processor()
    
    # Exemplo 4: Crit√©rios de valida√ß√£o
    demonstrate_validation_criteria()
    
    # Salva relat√≥rio em arquivo
    with open('url_validation_report_example.json', 'w', encoding='utf-8') as f:
        json.dump(url_report, f, ensure_ascii=False, indent=2)
    
    print(f"\n\n‚úÖ Relat√≥rio salvo em 'url_validation_report_example.json'")
    print("‚úÖ Validador de URLs implementado com sucesso!")
    print("\nüöÄ Para usar no sistema principal:")
    print("   python src/main.py")
    print("   (A valida√ß√£o de URLs roda automaticamente!)")